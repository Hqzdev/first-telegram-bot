from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import random

router = Router()

# –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞
@router.message(Command("rps"))
async def rock_paper_scissors(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úä –ö–∞–º–µ–Ω—å", callback_data="rps_rock"),
            InlineKeyboardButton(text="‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="rps_scissors"),
            InlineKeyboardButton(text="‚úã –ë—É–º–∞–≥–∞", callback_data="rps_paper")
        ]
    ])
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ö–æ–¥:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith('rps_'))
async def process_rps(callback_query):
    user_choice = callback_query.data.split('_')[1]
    choices = ['rock', 'paper', 'scissors']
    bot_choice = random.choice(choices)
    
    choice_emojis = {
        'rock': '‚úä',
        'paper': '‚úã',
        'scissors': '‚úåÔ∏è'
    }
    
    result = ""
    if user_choice == bot_choice:
        result = "ü§ù –ù–∏—á—å—è!"
    elif (
        (user_choice == 'rock' and bot_choice == 'scissors') or
        (user_choice == 'paper' and bot_choice == 'rock') or
        (user_choice == 'scissors' and bot_choice == 'paper')
    ):
        result = "üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
    else:
        result = "üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
    
    await callback_query.message.edit_text(
        f"–í–∞—à –≤—ã–±–æ—Ä: {choice_emojis[user_choice]}\n"
        f"–ú–æ–π –≤—ã–±–æ—Ä: {choice_emojis[bot_choice]}\n\n"
        f"{result}"
    )

# –°–ª–æ—Ç—ã
@router.message(Command("slots"))
async def slots(message: Message):
    emojis = ['üçé', 'üçä', 'üçá', 'üçí', 'üé∞', 'üíé']
    result = [random.choice(emojis) for _ in range(3)]
    
    response = f"üé∞ –°–ª–æ—Ç—ã:\n\n{' | '.join(result)}\n\n"
    
    if len(set(result)) == 1:
        response += "üéâ –î–ñ–ï–ö–ü–û–¢! –í—Å–µ —Å–∏–º–≤–æ–ª—ã —Å–æ–≤–ø–∞–ª–∏!"
    elif len(set(result)) == 2:
        response += "üé® –ù–µ–ø–ª–æ—Ö–æ! –ï—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!"
    else:
        response += "üò¢ –ù–µ –ø–æ–≤–µ–∑–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
    
    await message.reply(response)

# –ö–æ—Å—Ç–∏
@router.message(Command("dice"))
async def dice(message: Message):
    await message.answer_dice(emoji="üé≤")

# –î–∞—Ä—Ç—Å
@router.message(Command("darts"))
async def darts(message: Message):
    await message.answer_dice(emoji="üéØ")

# –ë–∞—Å–∫–µ—Ç–±–æ–ª
@router.message(Command("basketball"))
async def basketball(message: Message):
    await message.answer_dice(emoji="üèÄ")

# –§—É—Ç–±–æ–ª
@router.message(Command("football"))
async def football(message: Message):
    await message.answer_dice(emoji="‚öΩÔ∏è")

# –ö–∞–∑–∏–Ω–æ
@router.message(Command("casino"))
async def casino(message: Message):
    await message.answer_dice(emoji="üé∞")

# –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
@router.message(Command("guess"))
async def guess_game(message: Message):
    number = random.randint(1, 100)
    await message.reply(
        "üéÆ –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /number <—á–∏—Å–ª–æ> –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ —É–≥–∞–¥–∞—Ç—å!"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not hasattr(router, "guess_numbers"):
        router.guess_numbers = {}
    router.guess_numbers[message.from_user.id] = number

@router.message(Command("number"))
async def check_number(message: Message):
    if not hasattr(router, "guess_numbers") or message.from_user.id not in router.guess_numbers:
        await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /guess!")
        return
    
    try:
        guess = int(message.text.split()[1])
        number = router.guess_numbers[message.from_user.id]
        
        if guess == number:
            await message.reply("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!")
            del router.guess_numbers[message.from_user.id]
        elif guess < number:
            await message.reply("‚¨ÜÔ∏è –ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ!")
        else:
            await message.reply("‚¨áÔ∏è –ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ!")
    except (ValueError, IndexError):
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /number <—á–∏—Å–ª–æ>")

# –í–∏—Å–µ–ª–∏—Ü–∞
WORDS = ['python', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ç–µ–ª–µ–≥—Ä–∞–º', '–±–æ—Ç', '–∏–≥—Ä–∞', '–∫–æ–º–∞–Ω–¥–∞']

@router.message(Command("hangman"))
async def hangman_game(message: Message):
    word = random.choice(WORDS)
    guessed = ['_'] * len(word)
    attempts = 6
    
    if not hasattr(router, "hangman_games"):
        router.hangman_games = {}
    
    router.hangman_games[message.from_user.id] = {
        'word': word,
        'guessed': guessed,
        'attempts': attempts,
        'used_letters': set()
    }
    
    await message.reply(
        f"üéÆ –ò–≥—Ä–∞ '–í–∏—Å–µ–ª–∏—Ü–∞' –Ω–∞—á–∞—Ç–∞!\n\n"
        f"–°–ª–æ–≤–æ: {' '.join(guessed)}\n"
        f"–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {attempts}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /letter <–±—É–∫–≤–∞> –¥–ª—è –æ—Ç–≥–∞–¥—ã–≤–∞–Ω–∏—è –±—É–∫–≤—ã!"
    )

@router.message(Command("letter"))
async def check_letter(message: Message):
    if not hasattr(router, "hangman_games") or message.from_user.id not in router.hangman_games:
        await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /hangman!")
        return
    
    try:
        letter = message.text.split()[1].lower()
        game = router.hangman_games[message.from_user.id]
        
        if len(letter) != 1:
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –±—É–∫–≤—É!")
            return
            
        if letter in game['used_letters']:
            await message.reply("‚ùå –≠—Ç–∞ –±—É–∫–≤–∞ —É–∂–µ –±—ã–ª–∞!")
            return
            
        game['used_letters'].add(letter)
        
        if letter in game['word']:
            for i, char in enumerate(game['word']):
                if char == letter:
                    game['guessed'][i] = letter
            
            if '_' not in game['guessed']:
                await message.reply(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: {game['word']}!"
                )
                del router.hangman_games[message.from_user.id]
                return
        else:
            game['attempts'] -= 1
            
        if game['attempts'] == 0:
            await message.reply(
                f"üò¢ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –°–ª–æ–≤–æ –±—ã–ª–æ: {game['word']}"
            )
            del router.hangman_games[message.from_user.id]
            return
            
        await message.reply(
            f"–°–ª–æ–≤–æ: {' '.join(game['guessed'])}\n"
            f"–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {game['attempts']}\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: {', '.join(sorted(game['used_letters']))}"
        )
        
    except IndexError:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /letter <–±—É–∫–≤–∞>") 