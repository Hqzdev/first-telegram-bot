from aiogram import Bot
from aiogram.types import BotCommand
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
def get_local_commands():
    # –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    return [
        {"name": "start", "description": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", "deleted": False},
        {"name": "help", "description": "–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É", "deleted": False},
        {"name": "menu", "description": "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", "deleted": False},
        {"name": "feedback", "description": "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "deleted": True},  # –£–¥–∞–ª—è–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞
    ]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
def are_commands_different(existing_command, local_command):
    return (
        existing_command.command != local_command["name"]
        or existing_command.description != local_command["description"]
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/—É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
async def register_commands(bot: Bot):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        local_commands = get_local_commands()
        application_commands = await bot.get_my_commands()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–ª–æ–≤–∞—Ä—å
        existing_commands = {cmd.command: cmd for cmd in application_commands}

        for local_command in local_commands:
            name = local_command["name"]
            description = local_command["description"]
            is_deleted = local_command.get("deleted", False)

            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if name in existing_commands:
                existing_command = existing_commands[name]

                # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–µ—á–µ–Ω–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                if is_deleted:
                    await bot.delete_my_commands(scope=None)
                    logger.info(f"üóë –£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{name}'.")
                    continue

                # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                if are_commands_different(existing_command, local_command):
                    await bot.set_my_commands(
                        [BotCommand(command=name, description=description)]
                    )
                    logger.info(f"üîÅ –ò–∑–º–µ–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{name}'.")
            else:
                # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–∞—è
                if is_deleted:
                    logger.info(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{name}', –ø–æ–º–µ—á–µ–Ω–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.")
                    continue

                await bot.set_my_commands(
                    [BotCommand(command=name, description=description)]
                )
                logger.info(f"üëç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{name}'.")

    except Exception as error:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}")
